# -*- coding: utf-8 -*-
"""Chip_Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l0Xua8znGf4K5HtyqSPv6GCfbwVYf5CB
"""

import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt

data_dir = '/content/drive/MyDrive/CHIP_TYPE_CLASSIFICATION/train'

X, y = [], []

for label in os.listdir(data_dir):
    label_dir = os.path.join(data_dir, label)
    if os.path.isdir(label_dir):
        for img_file in os.listdir(label_dir):
            img_path = os.path.join(label_dir, img_file)
            try:
                img = cv2.imread(img_path)
                img = cv2.resize(img, (250, 250))
                img = img / 255.0
                X.append(img.flatten())
                y.append(label)
            except Exception as e:
                print(f"error loading image {img_path}: {e}")

label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

from sklearn.preprocessing import OneHotEncoder
one_hot_encoder = OneHotEncoder(sparse_output=False)
y_onehot = one_hot_encoder.fit_transform(y_encoded.reshape(-1, 1))

X = np.array(X)

X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.1, random_state=42)

import xgboost as xgb
dtrain = xgb.DMatrix(X_train, label=y_train)
dtest = xgb.DMatrix(X_test, label=y_test)
params = {
    'objective': 'multi:softmax',
    'num_class': 3,
    'eval_metric': 'mlogloss',
    'max_depth': 3,
    'eta': 0.2,
    'tree_method': 'gpu_hist',
    'subsample': 0.8,
    'colsample_bytree': 0.8,
    'min_child_weight': 1,
}
num_round = 10
bst = xgb.train(params, dtrain, num_round)
y_pred = bst.predict(dtest)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")

print(f"Accuracy: {accuracy:.4f}")

#import joblib

#joblib.dump(bst, 'chip_moedl.pkl')

